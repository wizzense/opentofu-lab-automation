name: Enhanced CI/CD with Change Control Enforcement

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POWERSHELL_VERSION: '7.4.0'

jobs:
  # Pre-validation before any other jobs
  pre-validation:
    name: 🔍 Pre-Validation & Change Control Check
    runs-on: ubuntu-latest
    outputs:
      has-powershell-changes: ${{ steps.changes.outputs.powershell }}
      has-python-changes: ${{ steps.changes.outputs.python }}
      has-yaml-changes: ${{ steps.changes.outputs.yaml }}
      has-test-changes: ${{ steps.changes.outputs.tests }}
      is-patch-branch: ${{ steps.branch-check.outputs.is-patch }}
      requires-manual-review: ${{ steps.review-check.outputs.manual-required }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Detect Changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          powershell:
            - '**/*.ps1'
            - '**/*.psm1'
            - '**/*.psd1'
          python:
            - '**/*.py'
            - 'pyproject.toml'
            - 'requirements.txt'
          yaml:
            - '**/*.yml'
            - '**/*.yaml'
          tests:
            - '**/tests/**'
            - '**/*.Tests.ps1'
            - '**/*test*.py'

    - name: 🌿 Check Branch Type
      id: branch-check
      run: |
        branch_name="${{ github.head_ref || github.ref_name }}"
        if [[ "$branch_name" == patch/* ]]; then
          echo "is-patch=true" >> $GITHUB_OUTPUT
          echo "🔧 Detected patch branch: $branch_name"
        else
          echo "is-patch=false" >> $GITHUB_OUTPUT
          echo "📝 Regular branch: $branch_name"
        fi

    - name: 🔍 Manual Review Requirements Check
      id: review-check
      run: |
        # Always require manual review for patch branches
        if [[ "${{ steps.branch-check.outputs.is-patch }}" == "true" ]]; then
          echo "manual-required=true" >> $GITHUB_OUTPUT
          echo "🚨 Manual review required for patch branch"
        else
          echo "manual-required=false" >> $GITHUB_OUTPUT
        fi

    - name: ⚠️ Validate Change Control Compliance
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "🚨 ERROR: Direct push to main branch detected!"
        echo "All changes must go through patch branches and PR review."
        echo "Please use the Git-controlled patch workflow:"
        echo "  Invoke-GitControlledPatch -PatchDescription 'Your fix' -PatchOperation { ... }"
        exit 1

  # PowerShell validation with enhanced error detection
  powershell-validation:
    name: 🔧 PowerShell Validation
    runs-on: windows-latest
    needs: pre-validation
    if: needs.pre-validation.outputs.has-powershell-changes == 'true'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Install PowerShell Modules
      shell: pwsh
      run: |
        Install-Module PSScriptAnalyzer -Force -Scope CurrentUser
        Install-Module Pester -Force -Scope CurrentUser -MinimumVersion 5.0.0

    - name: 🔍 PowerShell Linting (Critical Errors Only)
      shell: pwsh
      run: |
        Write-Host "🔍 Running PSScriptAnalyzer with strict validation..."
        
        $psFiles = Get-ChildItem -Path . -Include "*.ps1", "*.psm1", "*.psd1" -Recurse
        $criticalErrors = @()
        $allIssues = @()
        
        foreach ($file in $psFiles) {
          $results = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Error, Warning
          $allIssues += $results
          $criticalErrors += $results | Where-Object { $_.Severity -eq 'Error' }
        }
        
        Write-Host "📊 Analysis Results:"
        Write-Host "  Total files analyzed: $($psFiles.Count)"
        Write-Host "  Total issues found: $($allIssues.Count)"
        Write-Host "  Critical errors: $($criticalErrors.Count)"
        
        if ($criticalErrors.Count -gt 0) {
          Write-Host "🚨 Critical PowerShell errors detected:" -ForegroundColor Red
          $criticalErrors | ForEach-Object {
            Write-Host "  ❌ $($_.ScriptName): $($_.Message)" -ForegroundColor Red
          }
          exit 1
        } else {
          Write-Host "✅ No critical PowerShell errors found" -ForegroundColor Green
        }

    - name: 🧪 PowerShell Test Execution
      shell: pwsh
      run: |
        Write-Host "🧪 Running PowerShell tests..."
        
        $testFiles = Get-ChildItem -Path . -Include "*.Tests.ps1" -Recurse
        if ($testFiles.Count -eq 0) {
          Write-Host "ℹ️ No PowerShell test files found"
          return
        }
        
        $testResults = Invoke-Pester -Path $testFiles -PassThru -CI
        
        Write-Host "📊 Test Results:"
        Write-Host "  Total tests: $($testResults.TotalCount)"
        Write-Host "  Passed: $($testResults.PassedCount)"
        Write-Host "  Failed: $($testResults.FailedCount)"
        Write-Host "  Skipped: $($testResults.SkippedCount)"
        
        if ($testResults.FailedCount -gt 0) {
          Write-Host "🚨 PowerShell test failures detected!" -ForegroundColor Red
          exit 1
        } else {
          Write-Host "✅ All PowerShell tests passed" -ForegroundColor Green
        }

  # Python validation with syntax and import checking
  python-validation:
    name: 🐍 Python Validation
    runs-on: ubuntu-latest
    needs: pre-validation
    if: needs.pre-validation.outputs.has-python-changes == 'true'
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f pyproject.toml ]; then pip install -e .; fi

    - name: 🔍 Python Syntax Validation
      run: |
        echo "🔍 Validating Python syntax..."
        
        python_files=$(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*")
        syntax_errors=0
        
        for file in $python_files; do
          echo "Checking: $file"
          if ! python -m py_compile "$file"; then
            echo "❌ Syntax error in: $file"
            syntax_errors=$((syntax_errors + 1))
          fi
        done
        
        if [ $syntax_errors -gt 0 ]; then
          echo "🚨 Found $syntax_errors Python syntax errors!"
          exit 1
        else
          echo "✅ All Python files have valid syntax"
        fi

    - name: 🎨 Code Formatting Check
      run: |
        echo "🎨 Checking Python code formatting..."
        black --check --diff .

    - name: 🔍 Linting with Flake8
      run: |
        echo "🔍 Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: 🧪 Python Tests
      run: |
        echo "🧪 Running Python tests..."
        if [ -d "py/tests" ]; then
          pytest py/tests/ -v
        else
          echo "ℹ️ No Python test directory found"
        fi

  # YAML and workflow validation
  yaml-validation:
    name: 📄 YAML & Workflow Validation
    runs-on: ubuntu-latest
    needs: pre-validation
    if: needs.pre-validation.outputs.has-yaml-changes == 'true'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Install YAML Tools
      run: |
        pip install yamllint

    - name: 🔍 YAML Syntax Validation
      run: |
        echo "🔍 Validating YAML syntax..."
        
        yaml_files=$(find . -name "*.yml" -o -name "*.yaml")
        yaml_errors=0
        
        for file in $yaml_files; do
          echo "Checking: $file"
          if ! yamllint "$file"; then
            echo "❌ YAML error in: $file"
            yaml_errors=$((yaml_errors + 1))
          fi
        done
        
        if [ $yaml_errors -gt 0 ]; then
          echo "🚨 Found $yaml_errors YAML errors!"
          exit 1
        else
          echo "✅ All YAML files are valid"
        fi

    - name: 🔍 GitHub Actions Workflow Validation
      uses: docker://rhymond/github-action-validate:latest
      with:
        files: .github/workflows/*.yml

  # Cross-platform compatibility testing
  cross-platform-test:
    name: 🌐 Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    needs: [pre-validation, powershell-validation, python-validation]
    if: |
      always() && 
      (needs.powershell-validation.result == 'success' || needs.powershell-validation.result == 'skipped') &&
      (needs.python-validation.result == 'success' || needs.python-validation.result == 'skipped')
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Install PowerShell (Linux/macOS)
      if: matrix.platform != 'windows'
      shell: bash
      run: |
        if [[ "${{ matrix.platform }}" == "linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          brew install powershell
        fi

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🧪 Basic Compatibility Test
      shell: pwsh
      run: |
        Write-Host "🧪 Testing basic compatibility on ${{ matrix.platform }}..."
        
        # Test PowerShell module loading
        $modulePath = "./pwsh/modules"
        if (Test-Path $modulePath) {
          Write-Host "✅ PowerShell modules directory found"
        } else {
          Write-Host "⚠️ PowerShell modules directory not found"
        }
        
        # Test Python availability
        try {
          $pythonVersion = python --version
          Write-Host "✅ Python available: $pythonVersion"
        } catch {
          Write-Host "⚠️ Python not available or not in PATH"
        }
        
        Write-Host "✅ Cross-platform compatibility test completed for ${{ matrix.platform }}"

  # Manual review enforcement for patch branches
  manual-review-gate:
    name: 🔍 Manual Review Gate
    runs-on: ubuntu-latest
    needs: [pre-validation, powershell-validation, python-validation, yaml-validation]
    if: |
      always() && 
      needs.pre-validation.outputs.is-patch-branch == 'true' &&
      (needs.powershell-validation.result == 'success' || needs.powershell-validation.result == 'skipped') &&
      (needs.python-validation.result == 'success' || needs.python-validation.result == 'skipped') &&
      (needs.yaml-validation.result == 'success' || needs.yaml-validation.result == 'skipped')
    
    steps:
    - name: 📋 Manual Review Required
      run: |
        echo "🔍 MANUAL REVIEW REQUIRED"
        echo "================================"
        echo "This is a patch branch that requires human validation."
        echo ""
        echo "📋 Review Checklist:"
        echo "  ✅ All automated validations passed"
        echo "  🔍 Manual code review required"
        echo "  🧪 Changes tested in clean environment"
        echo "  📝 Documentation updated if needed"
        echo "  🚨 No breaking changes introduced"
        echo ""
        echo "⚠️  This PR MUST NOT be merged automatically."
        echo "🔒 Human approval is required before merge."
        
        # This job will always "succeed" but signals manual review requirement

  # Final validation summary
  validation-summary:
    name: 📊 Validation Summary
    runs-on: ubuntu-latest
    needs: [pre-validation, powershell-validation, python-validation, yaml-validation, cross-platform-test, manual-review-gate]
    if: always()
    
    steps:
    - name: 📊 Generate Validation Report
      run: |
        echo "# 📊 CI/CD Validation Report" > validation-report.md
        echo "" >> validation-report.md
        echo "## 🔍 Validation Results" >> validation-report.md
        echo "" >> validation-report.md
        
        # Pre-validation
        echo "### Pre-validation" >> validation-report.md
        echo "Status: ${{ needs.pre-validation.result }}" >> validation-report.md
        echo "- PowerShell changes: ${{ needs.pre-validation.outputs.has-powershell-changes }}" >> validation-report.md
        echo "- Python changes: ${{ needs.pre-validation.outputs.has-python-changes }}" >> validation-report.md
        echo "- YAML changes: ${{ needs.pre-validation.outputs.has-yaml-changes }}" >> validation-report.md
        echo "- Is patch branch: ${{ needs.pre-validation.outputs.is-patch-branch }}" >> validation-report.md
        echo "" >> validation-report.md
        
        # PowerShell validation
        echo "### PowerShell Validation" >> validation-report.md
        echo "Status: ${{ needs.powershell-validation.result }}" >> validation-report.md
        echo "" >> validation-report.md
        
        # Python validation
        echo "### Python Validation" >> validation-report.md
        echo "Status: ${{ needs.python-validation.result }}" >> validation-report.md
        echo "" >> validation-report.md
        
        # YAML validation
        echo "### YAML Validation" >> validation-report.md
        echo "Status: ${{ needs.yaml-validation.result }}" >> validation-report.md
        echo "" >> validation-report.md
        
        # Cross-platform test
        echo "### Cross-Platform Compatibility" >> validation-report.md
        echo "Status: ${{ needs.cross-platform-test.result }}" >> validation-report.md
        echo "" >> validation-report.md
        
        # Manual review gate
        echo "### Manual Review Gate" >> validation-report.md
        echo "Status: ${{ needs.manual-review-gate.result }}" >> validation-report.md
        if [[ "${{ needs.pre-validation.outputs.is-patch-branch }}" == "true" ]]; then
          echo "⚠️ **Manual review required for patch branch**" >> validation-report.md
        fi
        echo "" >> validation-report.md
        
        cat validation-report.md

    - name: 🎯 Final Status Check
      run: |
        overall_success=true
        
        # Check critical validations
        if [[ "${{ needs.powershell-validation.result }}" == "failure" ]]; then
          echo "❌ PowerShell validation failed"
          overall_success=false
        fi
        
        if [[ "${{ needs.python-validation.result }}" == "failure" ]]; then
          echo "❌ Python validation failed"
          overall_success=false
        fi
        
        if [[ "${{ needs.yaml-validation.result }}" == "failure" ]]; then
          echo "❌ YAML validation failed"
          overall_success=false
        fi
        
        if [[ "$overall_success" == "true" ]]; then
          echo "✅ All critical validations passed"
          if [[ "${{ needs.pre-validation.outputs.is-patch-branch }}" == "true" ]]; then
            echo "🔍 Ready for manual review (patch branch)"
          else
            echo "🎉 All validations completed successfully"
          fi
        else
          echo "❌ Critical validation failures detected"
          exit 1
        fi
