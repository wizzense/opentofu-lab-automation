---
# filepath: /workspaces/opentofu-lab-automation/.github/workflows/lint.yml
name: Lint

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]

jobs:
  lint:
    name: Lint PowerShell and Python
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate gh
        shell: bash
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      - name: Install PowerShell
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if ! command -v pwsh >/dev/null 2>&1; then
            if [["$RUNNER_OS" == "Linux"]]; then
              sudo apt-get update
              sudo apt-get install -y wget apt-transport-https \
                software-properties-common
              wget -q https://packages.microsoft.com/config/ubuntu/22.04/\
              packages-microsoft-prod.deb
              sudo dpkg -i packages-microsoft-prod.deb
              sudo apt-get update
              sudo apt-get install -y powershell
            elif [["$RUNNER_OS" == "macOS"]]; then
              brew install --cask powershell
            fi
          fi
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: tests/PesterConfiguration.psd1
      - name: Cache PowerShell modules (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\Documents\WindowsPowerShell\Modules
            C:\Users\runneradmin\Documents\PowerShell\Modules
          key: windows-pwsh-modules-${{ hashFiles('tests/PesterConfiguration.psd1') }}
          restore-keys: windows-pwsh-modules-
      - name: Cache PowerShell modules (Posix)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-pwsh-modules-${{ hashFiles('tests/PesterConfiguration.psd1') }}
          restore-keys: ${{ runner.os }}-pwsh-modules-
      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer |\
                Where-Object { $_.Version -ge [version]'1.22.0' })) {
              Install-Module -Name PSScriptAnalyzer -RequiredVersion 1.22.0 -Scope CurrentUser -Force
            }
            Write-Host "PSScriptAnalyzer ready" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install PSScriptAnalyzer: $_"
            exit 1
          }
      - name: Install powershell-yaml
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            Install-Module -Name powershell-yaml -Force -Scope CurrentUser
            Write-Host "powershell-yaml installed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install powershell-yaml: $_"
            exit 1
          }
      - name: Install yamllint
        shell: bash
        run: pip install yamllint
      - name: Set log path
        run: echo "LOG_FILE=lint-${{ matrix.os }}.txt" >> $GITHUB_ENV
      - name: Install ruff
        shell: bash
        run: pip install "ruff>=0.1"
      - name: Run Script Analyzer
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            $log = $env:LOG_FILE
            $settings = Join-Path $PWD 'pwsh/PSScriptAnalyzerSettings.psd1'
            $files = Get-ChildItem -Path . -Recurse `
                -Include *.ps1,*.psm1,*.psd1 -File |
                Where-Object { $_.FullName -ne $settings } |
                Select-Object -ExpandProperty FullName
            $results = $files | Invoke-ScriptAnalyzer -Severity Error,Warning -Settings $settings
            $results | Format-Table | Tee-Object -FilePath $log
            if ($results | Where-Object Severity -eq 'Error') {
                Write-Error 'ScriptAnalyzer errors detected'
                exit 1
            }
            Write-Host "Script analysis completed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Script analysis failed: $_"
            exit 1
          }
      - name: Run Comprehensive PowerShell Validation
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            Write-Host "Running comprehensive PowerShell validation..." -ForegroundColor Cyan

            # Run our comprehensive validation tool
            $validationResult = & "$PWD/tools/Validate-PowerShellScripts.ps1" -Path "." -CI
            $exitCode = $LASTEXITCODE

            # Log results
            "PowerShell Validation Results:" | Out-File -FilePath $env:LOG_FILE -Append
            $validationResult | Out-File -FilePath $env:LOG_FILE -Append

            if ($exitCode -ne 0) {
              Write-Host "❌ PowerShell validation failed" -ForegroundColor Red
              Write-Host "Run 'pwsh tools/Validate-PowerShellScripts.ps1 -Path . -AutoFix' to fix issues" -ForegroundColor Yellow
              exit 1
            }

            Write-Host "✅ All PowerShell files passed comprehensive validation" -ForegroundColor Green

          } catch {
            Write-Error "PowerShell validation failed: $_"
            Write-Host "Falling back to basic syntax validation..." -ForegroundColor Yellow

            # Fallback to basic validation if our tool fails
            $files = Get-ChildItem -Path . -Recurse -Include *.ps1,*.psm1 -File
            $syntaxErrors = @()

            foreach ($file in $files) {
              try {
                $content = Get-Content $file.FullName -Raw
                [System.Management.Automation.PSParser]::Tokenize($content, [ref]$null) | Out-Null
              } catch {
                $syntaxErrors += "❌ $($file.Name): $($_.Exception.Message)"
              }
            }

            if ($syntaxErrors.Count -gt 0) {
              Write-Host "Basic Syntax Errors Found:" -ForegroundColor Red
              $syntaxErrors | ForEach-Object { Write-Host $_ -ForegroundColor Red }
              $syntaxErrors | Out-File -FilePath $env:LOG_FILE -Append
              exit 1
            }

            Write-Host "Basic syntax validation passed" -ForegroundColor Green
          }
      - name: Run Custom Script Analyzer
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            ./CustomLint.ps1 2>&1 | Tee-Object -FilePath $env:LOG_FILE -Append
            Write-Host "Custom lint analysis completed" -ForegroundColor Green
          } catch {
            Write-Warning "Custom lint analysis failed: $_"
            # Don't fail the build for custom lint issues
          }
      - name: Run ruff
        shell: bash
        run: |
          ruff check . 2>&1 | tee -a "$LOG_FILE"
      - name: Run yamllint
        shell: bash
        run: |
          yamllint .github/workflows $(git ls-files '*.yml' '*.yaml') 2>&1 | tee -a "$LOG_FILE"
      - name: Upload lint log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-${{ matrix.os }}
          path: ${{ env.LOG_FILE }}
