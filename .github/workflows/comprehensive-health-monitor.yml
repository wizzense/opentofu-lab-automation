---
name: Comprehensive Health Monitor

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  push:
    branches: [main, advanced-testing]
    paths:
      - 'pwsh/**'
      - 'tests/**'
      - 'tools/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, advanced-testing]
  workflow_dispatch:

jobs:
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    outputs:
      overall-status: ${{ steps.health.outputs.status }}
      report-url: ${{ steps.health.outputs.report-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Install PowerShell
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https \
            software-properties-common
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser

      - name: Run Comprehensive Health Check
        id: health
        shell: pwsh
        run: |
          $result = & ./comprehensive-health-check.ps1 -CI -Detailed -OutputFormat JSON
          $healthData = $result | ConvertFrom-Json

          # Set outputs for other jobs
          echo "status=$($healthData.OverallStatus)" >> $env:GITHUB_OUTPUT
          echo "healthy-count=$($healthData.Summary.Healthy)" >> $env:GITHUB_OUTPUT
          echo "warning-count=$($healthData.Summary.Warning)" >> $env:GITHUB_OUTPUT
          echo "critical-count=$($healthData.Summary.Critical)" >> $env:GITHUB_OUTPUT

          # Save detailed report
          $result | Out-File health-report.json -Encoding UTF8

          Write-Host "Health Check Complete:"
          Write-Host "  Status: $($healthData.OverallStatus)"
          Write-Host "  Healthy: $($healthData.Summary.Healthy)"
          Write-Host "  Warning: $($healthData.Summary.Warning)"
          Write-Host "  Critical: $($healthData.Summary.Critical)"

      - name: Upload Health Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-report
          path: health-report.json
          retention-days: 30

      - name: Create Status Badge Data
        if: always()
        shell: pwsh
        run: |
          $status = "${{ steps.health.outputs.status }}"
          $color = switch ($status) {
            "Healthy" { "brightgreen" }
            "Warning" { "yellow" }
            "Critical" { "red" }
            default { "lightgrey" }
          }

          $badgeData = @{
            schemaVersion = 1
            label = "Health Status"
            message = $status
            color = $color
          }

          $badgeData | ConvertTo-Json | Out-File health-badge.json -Encoding UTF8

      - name: Notify on Critical Issues
        if: steps.health.outputs.status == 'Critical'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Critical System Health Issues Detected',
              body: `
            ## Critical Health Check Failure

            The comprehensive health check has detected critical issues in the automation system.

            **Status**: Critical
            **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}

            ### Next Steps
            1. Review the health check report artifact
            2. Address critical issues immediately
            3. Re-run health check to verify fixes

            This issue was automatically created by the health monitoring system.
            `,
              labels: ['health-check', 'critical', 'automated']
            };

            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'health-check,critical',
              state: 'open'
            });

            if (existingIssues.data.length === 0) {
              await github.rest.issues.create(issue);
            }

  validate-workflows:
    name: Validate Workflows
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Validate YAML Syntax
        run: |
          sudo snap install yq

          # Check all workflow files
          for file in .github/workflows/*.yml; do
            echo "Validating $file..."
            if yq eval . "$file" > /dev/null 2>&1; then
              echo "  ‚úÖ Valid YAML syntax"
            else
              echo "  ‚ùå Invalid YAML syntax"
              exit 1
            fi
          done

      - name: Check Workflow Structure
        shell: bash
        run: |
          # Verify all workflows have required elements
          for file in .github/workflows/*.yml; do
            echo "Checking structure of $file..."

            if ! grep -q "^name:" "$file"; then
              echo "  ‚ùå Missing 'name' field"
              exit 1
            fi

            if ! grep -q "^on:" "$file"; then
              echo "  ‚ùå Missing 'on' field"
              exit 1
            fi

            if ! grep -q "^jobs:" "$file"; then
              echo "  ‚ùå Missing 'jobs' field"
              exit 1
            fi

            echo "  ‚úÖ Structure valid"
          done

  test-cross-platform:
    name: Cross-Platform Tests
    needs: health-check
    if: always()
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install PowerShell (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https \
              software-properties-common
            wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y powershell
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install --cask powershell
          fi

      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser

      - name: Test Core Script Syntax
        shell: pwsh
        run: |
          $errors = @()

          # Test key scripts on this platform
          $coreScripts = @(
            "pwsh/runner.ps1",
            "pwsh/kicker-bootstrap.ps1",
            "pwsh/ScriptTemplate.ps1"
          )

          foreach ($script in $coreScripts) {
            if (Test-Path $script) {
              try {
                $content = Get-Content $script -Raw
                $null = [System.Management.Automation.PSParser]::Tokenize($content, [ref]$null)
                Write-Host "‚úÖ $script - Valid syntax" -ForegroundColor Green
              } catch {
                $errors += "$script`: $($_.Exception.Message)"
                Write-Host "‚ùå $script - Syntax error: $($_.Exception.Message)" -ForegroundColor Red
              }
            } else {
              $errors += "$script`: File not found"
              Write-Host "‚ùå $script - File not found" -ForegroundColor Red
            }
          }

          if ($errors.Count -gt 0) {
            Write-Host "`nSyntax errors found on ${{ matrix.os }}:" -ForegroundColor Red
            $errors | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
            exit 1
          }

          Write-Host "`n‚úÖ All core scripts pass syntax validation on ${{ matrix.os }}" -ForegroundColor Green

      - name: Test PowerShell Module Loading
        shell: pwsh
        run: |
          # Test that we can load key modules/functions
          try {
            # Test loading validation tools
            if (Test-Path "tools/Validate-PowerShellScripts.ps1") {
              . ./tools/Validate-PowerShellScripts.ps1
              Write-Host "‚úÖ Validation tools loaded successfully" -ForegroundColor Green
            }

            # Test bootstrap script basic functionality
            if (Test-Path "pwsh/kicker-bootstrap.ps1") {
              $output = & ./pwsh/kicker-bootstrap.ps1 -WhatIf 2>&1
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Bootstrap script WhatIf mode works" -ForegroundColor Green
              } else {
                Write-Host "‚ùå Bootstrap script WhatIf failed" -ForegroundColor Red
                exit 1
              }
            }

          } catch {
            Write-Host "‚ùå Module loading test failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

  report-status:
    name: Report Final Status
    runs-on: ubuntu-latest
    needs: [health-check, validate-workflows, test-cross-platform]
    if: always()
    steps:
      - name: Download Health Report
        uses: actions/download-artifact@v4
        with:
          name: health-check-report

      - name: Generate Summary
        shell: pwsh
        run: |
          $healthStatus = "${{ needs.health-check.outputs.overall-status }}"
          $workflowStatus = "${{ needs.validate-workflows.result }}"
          $crossPlatformStatus = "${{ needs.test-cross-platform.result }}"

          Write-Host "üè• COMPREHENSIVE HEALTH REPORT" -ForegroundColor Cyan
          Write-Host "=" * 50
          Write-Host "Health Check: $healthStatus" -ForegroundColor $(if ($healthStatus -eq 'Healthy') { 'Green' } elseif ($healthStatus -eq 'Warning') { 'Yellow' } else { 'Red' })
          Write-Host "Workflow Validation: $workflowStatus" -ForegroundColor $(if ($workflowStatus -eq 'success') { 'Green' } else { 'Red' })
          Write-Host "Cross-Platform Tests: $crossPlatformStatus" -ForegroundColor $(if ($crossPlatformStatus -eq 'success') { 'Green' } else { 'Red' })

          # Determine overall system status
          $overallHealthy = ($healthStatus -eq "Healthy" -and $workflowStatus -eq "success" -and $crossPlatformStatus -eq "success")

          if ($overallHealthy) {
            Write-Host "`nüéâ SYSTEM STATUS: FULLY OPERATIONAL" -ForegroundColor Green
            Write-Host "All components are healthy and functioning correctly across all platforms." -ForegroundColor Green
          } else {
            Write-Host "`n‚ö†Ô∏è SYSTEM STATUS: REQUIRES ATTENTION" -ForegroundColor Yellow
            Write-Host "One or more components need attention. Review the detailed reports above." -ForegroundColor Yellow
          }

          # Set job summary
          $summary = @"
          ## System Health Summary

          | Component | Status |
          |-----------|---------|
          | Health Check | $healthStatus |
          | Workflow Validation | $workflowStatus |
          | Cross-Platform Tests | $crossPlatformStatus |

          **Overall Status**: $(if ($overallHealthy) { "‚úÖ Operational" } else { "‚ö†Ô∏è Needs Attention" })
          "@

          $summary | Out-File $env:GITHUB_STEP_SUMMARY -Encoding utf8
