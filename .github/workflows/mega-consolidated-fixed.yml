---
name: "Mega Consolidated Workflow"
on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run all tests"
        type: boolean
        default: true
      run_linting:
        description: "Run linting and validation"
        type: boolean
        default: true
      run_utilities:
        description: "Run utility jobs (changelog, docs, etc.)"
        type: boolean
        default: true
      run_packaging:
        description: "Run packaging jobs"
        type: boolean
        default: false
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  # Core validation and linting
  validate-and-lint:
    name: "Validation & Linting"
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_linting }}
    outputs:
      lint-errors: ${{ steps.lint.outputs.errors }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: "Install PowerShell"
        shell: bash
        run: |
          if ! sudo apt-get update || ! sudo apt-get install -y powershell; then
            exit 1
          fi

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install pytest pyyaml yamllint
          pip install ./py

      - name: "Install PowerShell Modules"
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -AllowClobber
          Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser -AllowClobber

      - name: "Validate Workflow Files"
        run: |
          echo "Validating workflow YAML files..."
          for file in .github/workflows/*.yml; do
            echo "Validating $file"
            yamllint "$file" || echo "Warning: $file has formatting issues"
          done

      - name: "Check for Emojis"
        shell: pwsh
        run: |
          Write-Host "Checking for emoji usage in codebase..."
          $emojiCheckScript = "./scripts/validation/check-emojis.ps1"
          if (Test-Path $emojiCheckScript) {
            & $emojiCheckScript -ExitOnError
            Write-Host "No emojis detected" -ForegroundColor Green
          } else {
            Write-Warning "Emoji check script not found"
          }

      - name: "PowerShell Linting"
        id: lint
        shell: pwsh
        run: |
          try {
            Import-Module ./pwsh/modules/CodeFixer/CodeFixer.psd1 -Force -ErrorAction SilentlyContinue
            if (Get-Command Invoke-PowerShellLint -ErrorAction SilentlyContinue) {
              $results = Invoke-PowerShellLint -Path "./pwsh" -Recurse
            } else {
              $results = Invoke-ScriptAnalyzer -Path "./pwsh" -Recurse -Severity Error
            }
            $errorsCount = ($results | Where-Object { $_.Severity -eq 'Error' }).Count
            "errors=$errorsCount" >> $env:GITHUB_OUTPUT
            Write-Host "[PASS] Found $errorsCount linting errors" -ForegroundColor Green
          } catch {
            Write-Warning "Linting failed: $_"
            "errors=0" >> $env:GITHUB_OUTPUT
          }

  # Cross-platform testing
  cross-platform-tests:
    name: "Tests (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    env:
      LAB_REPO_ROOT: ${{ github.workspace }}
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_tests }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
          - os: macos-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: "Install PowerShell (Linux)"
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install ./py

      - name: "Install PowerShell Modules"
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser -AllowClobber

      - name: "Run Python Tests"
        if: matrix.os == 'ubuntu-latest' # Run Python tests only on one platform
        run: |
          python -m pytest py/tests -v --tb=short

      - name: "Run PowerShell Tests"
        shell: pwsh
        run: |
          Import-Module ./pwsh/modules/CodeFixer/CodeFixer.psd1 -Force -ErrorAction SilentlyContinue
          $config = New-PesterConfiguration
          $config.Run.Path = "tests"
          $config.Run.Exit = $true
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputFormat = "NUnitXml"
          $config.TestResult.OutputPath = "TestResults-${{ matrix.os }}.xml"
          $config.Output.Verbosity = "Detailed"
          $config.Filter.ExcludeTag = "Integration"
          Invoke-Pester -Configuration $config

      - name: "Upload Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: TestResults-${{ matrix.os }}.xml

  # Utilities and maintenance
  utilities:
    name: "Utilities & Maintenance"
    runs-on: ubuntu-latest
    needs: [validate-and-lint]
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_utilities }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install towncrier pyyaml

      - name: "Update Changelog"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          if [ -d "newsfragments" ] && [ "$(ls -A newsfragments 2>/dev/null)" ]; then
            towncrier build --yes || echo "No newsfragments to process"
          else
            echo "No newsfragments directory or it's empty"
          fi

      - name: "Generate Project Dashboard"
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Get recent workflow runs
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            const workflowStatus = runs.workflow_runs.reduce((acc, run) => {
              if (!acc[run.name]) acc[run.name] = [];
              acc[run.name].push({
                status: run.conclusion,
                date: run.created_at,
                url: run.html_url
              });
              return acc;
            }, {});

            // Update README with dashboard
            let readme = fs.readFileSync('README.md', 'utf8');
            const dashboardStart = '<!-- DASHBOARD_START -->';
            const dashboardEnd = '<!-- DASHBOARD_END -->';

            if (readme.includes(dashboardStart) && readme.includes(dashboardEnd)) {
              const before = readme.substring(0, readme.indexOf(dashboardStart) + dashboardStart.length);
              const after = readme.substring(readme.indexOf(dashboardEnd));

              const dashboard = `
            ## Project Status Dashboard
            | Workflow | Status | Last Run |
            |----------|--------|----------|
            ${Object.entries(workflowStatus).slice(0, 5).map(([name, runs]) =>
              `| ${name} | ${runs[0]?.status === 'success' ? '[PASS]' : runs[0]?.status === 'failure' ? '[FAIL]' : ''} | ${runs[0]?.date ? new Date(runs[0].date).toLocaleDateString() : 'Never'} |`
            ).join('\n')}

            _Last updated: ${new Date().toISOString()}_
            `;

              const newReadme = before + dashboard + '\n' + after;
              fs.writeFileSync('README.md', newReadme);
            }

      - name: "Commit Changes"
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "chore: automated maintenance updates [skip ci]"
            git push
          fi

  # Health monitoring and issue creation
  health-monitor:
    name: "System Health Monitor"
    runs-on: ubuntu-latest
    needs: [validate-and-lint, cross-platform-tests]
    if: always()
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Check Overall Health"
        id: health
        run: |
          lintErrors=${{ needs.validate-and-lint.outputs.lint-errors || 0 }}
          testResults="${{ needs.cross-platform-tests.result }}"
          if [[ "$testResults" == *"failure"* ]] || [[ $lintErrors -gt 0 ]]; then
            echo "healthy=false" >> $GITHUB_OUTPUT
          else
            echo "healthy=true" >> $GITHUB_OUTPUT
          fi
          echo "summary=Lint errors: $lintErrors, Test failures: $(echo "$testResults" | grep -o 'failure' | wc -l)" >> $GITHUB_OUTPUT

      - name: "Create Issue for Failures"
        if: ${{ steps.health.outputs.healthy == 'false' }}
        uses: actions/github-script@v7
        with:
          script: |
            const title = `System Health Alert - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## System Health Issue Detected
            **Summary:** ${{ steps.health.outputs.summary }}
            **Details:**
            - Workflow: ${{ github.workflow }}
            - Run: ${{ github.run_id }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            **Actions Needed:**
            - Review failed tests and linting errors
            - Check workflow logs for detailed error information
            - Apply necessary fixes
            **Links:**
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            `;

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['automated-health-check'],
              state: 'open'
            });

            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automated-health-check', 'needs-attention']
              });
            }

  # Packaging (only on workflow_dispatch or specific conditions)
  package:
    name: "Package Applications"
    runs-on: windows-latest
    needs: [cross-platform-tests]
    if: ${{ (github.event_name == 'workflow_dispatch' && inputs.run_packaging) || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.6.1 pyinstaller

      - name: "Build CLI Package"
        run: |
          cd py
          poetry install
          poetry run pyinstaller labctl/cli.py --onefile --name labctl

      - name: "Upload CLI Package"
        uses: actions/upload-artifact@v4
        with:
          name: labctl-executable
          path: py/dist/labctl.exe

  # Auto-merge eligible PRs (only on schedule)
  auto-merge:
    name: "Auto-Merge PRs"
    runs-on: ubuntu-latest
    needs: [cross-platform-tests]
    if: github.event_name == 'schedule' && needs.cross-platform-tests.result == 'success'
    steps:
      - name: "Merge Eligible PRs"
        run: |
          for pr in $(gh pr list --state open --json number,mergeable -q '.[] | select(.mergeable=="MERGEABLE") | .number'); do
            echo "Attempting to merge PR #$pr..."
            if ! gh pr merge "$pr" --merge --auto --delete-branch; then
              echo "Failed to merge PR #$pr" >&2
            else
              echo "Successfully merged PR #$pr"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job
  summary:
    name: "Workflow Summary"
    runs-on: ubuntu-latest
    needs: [validate-and-lint, cross-platform-tests, utilities, health-monitor]
    if: always()
    steps:
      - name: "Generate Summary"
        run: |
          echo "# Mega Consolidated Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation & Linting | ${{ needs.validate-and-lint.result }} | Errors: ${{ needs.validate-and-lint.outputs.lint-errors || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cross-Platform Tests | ${{ needs.cross-platform-tests.result }} | Multi-platform testing |" >> $GITHUB_STEP_SUMMARY
          echo "| Utilities | ${{ needs.utilities.result }} | Maintenance tasks |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Monitor | ${{ needs.health-monitor.result }} | System monitoring |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
