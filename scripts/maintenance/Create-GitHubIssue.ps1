# Create-GitHubIssue.ps1
# Automated GitHub issue creation for recurring maintenance problems

[CmdletBinding()]
param(
    [Parameter(Mandatory)]
    [string]$Title,
    
    [Parameter(Mandatory)]
    [string]$Description,
    
    [Parameter()]
    [ValidateSet("bug", "enhancement", "maintenance", "critical")]
    [string]$Label = "maintenance",
    
    [Parameter()]
    [string[]]$AffectedFiles = @(),
    
    [Parameter()]
    [switch]$CreateIssue
)

# Check if GitHub CLI is available
try {
    $null = gh --version
    $githubAvailable = $true
} catch {
    Write-Warning "GitHub CLI not available. Issue will be logged locally only."
    $githubAvailable = $false
}

# Create issue data structure
$issueData = @{
    Id = [Guid]::NewGuid().ToString()
    Title = $Title
    Description = $Description
    Label = $Label
    AffectedFiles = $AffectedFiles
    CreatedDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Status = "Open"
    AutoGenerated = $true
}

# Format description for GitHub
$githubDescription = @"
## Auto-Generated Maintenance Issue

**Description:** $Description

**Label:** $Label

**Affected Files:** $($AffectedFiles.Count) files
$(foreach ($file in ($AffectedFiles | Select-Object -First 10)) { "- $file`n" })
$(if ($AffectedFiles.Count -gt 10) { "... and $($AffectedFiles.Count - 10) more files" })

**Created:** $($issueData.CreatedDate)

---
*This issue was automatically generated by the maintenance system.*
*To resolve this issue, run the recommended maintenance commands.*
"@

# Store locally in PROJECT-ISSUES.json
$issuesFile = "./PROJECT-ISSUES.json"
$existingIssues = if (Test-Path $issuesFile) {
    Get-Content $issuesFile | ConvertFrom-Json
} else {
    @()
}

# Check for duplicate issues
$duplicateIssue = $existingIssues | Where-Object { 
    $_.Title -eq $Title -and $_.Status -eq "Open" 
}

if ($duplicateIssue) {
    Write-Host "Duplicate issue found. Updating existing issue..." -ForegroundColor Yellow
    $duplicateIssue.Description = $Description
    $duplicateIssue.AffectedFiles = $AffectedFiles
    $duplicateIssue.LastUpdated = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
} else {
    # Add new issue
    $allIssues = @($existingIssues) + @($issueData)
    $allIssues | ConvertTo-Json -Depth 5 | Set-Content $issuesFile
    Write-Host "Issue logged locally: $Title" -ForegroundColor Green
}

# Create GitHub issue if requested and available
if ($CreateIssue -and $githubAvailable) {
    try {
        $issueUrl = gh issue create --title $Title --body $githubDescription --label $Label
        Write-Host "GitHub issue created: $issueUrl" -ForegroundColor Green
        
        # Update local issue with GitHub URL
        $issueData.GitHubUrl = $issueUrl
        $allIssues = @($existingIssues) + @($issueData)
        $allIssues | ConvertTo-Json -Depth 5 | Set-Content $issuesFile
        
    } catch {
        Write-Warning "Failed to create GitHub issue: $_"
    }
}

return $issueData
